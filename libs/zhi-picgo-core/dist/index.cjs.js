"use strict";Object.defineProperty(exports,"__esModule",{value:!0});var e=require("fs-extra"),t=require("path"),n=require("events"),r=require("os"),i=require("commander"),s=require("inquirer"),a=require("image-size"),o=require("url"),l=require("chalk"),u=require("minimatch"),c=require("globby"),d=require("ejs"),p=require("download-git-repo"),g=require("rimraf"),E=require("dayjs"),_=require("util"),I=require("crypto"),f=require("mime-types"),h=require("qiniu"),P=require("ali-oss"),C=require("stream"),m=require("arraybuffer-to-buffer"),U=require("md5"),N=require("upyun"),L=require("resolve"),S=require("lodash"),D=require("child_process"),A=require("is-wsl"),T=require("axios"),y=require("form-data"),O=require("https"),B=require("tunnel"),b=require("@picgo/store"),x=require("cross-spawn"),w=require("js-yaml"),R=require("@picgo/i18n");function G(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var $=G(e),v=G(t),M=G(r),H=G(s),F=G(l),q=G(u),k=G(c),K=G(d),Y=G(p),j=G(g),Q=G(E),W=G(_),z=G(I),V=G(f),J=G(h),X=G(P),Z=G(m),ee=G(U),te=G(N),ne=G(L),re=G(A),ie=G(T),se=G(y),ae=G(O),oe=G(B),le=G(x),ue=G(w);const ce={handle:e=>{const t=e.cmd;t.program.command("install <plugins...>").description("install picgo plugin").alias("add").option("-p, --proxy <proxy>","Add proxy for installing").option("-r, --registry <registry>","Choose a registry for installing").action(((t,n)=>{const{proxy:r,registry:i}=n,s={proxy:r,registry:i};e.pluginHandler.install(t,s).catch((t=>{e.log.error(t)}))})),t.program.command("uninstall <plugins...>").alias("rm").description("uninstall picgo plugin").action((t=>{e.pluginHandler.uninstall(t).catch((t=>{e.log.error(t)}))})),t.program.command("update <plugins...>").description("update picgo plugin").option("-p, --proxy <proxy>","Add proxy for installing").option("-r, --registry <registry>","Choose a registry for installing").action(((t,n)=>{const{proxy:r,registry:i}=n,s={proxy:r,registry:i};e.pluginHandler.update(t,s).catch((t=>{e.log.error(t)}))}))}},de={handle:e=>{e.cmd.program.option("-c, --config <path>","set config path")}},pe=e=>e.startsWith("http://")||e.startsWith("https://"),ge=e=>((e=>{e=e||"";try{return e!==decodeURI(e)}catch(e){return!0}})(e)||(e=encodeURI(e)),e),Ee=e=>{try{const{width:t=0,height:n=0}=a.imageSize(e);return{real:!0,width:t,height:n}}catch(e){return{real:!1,width:200,height:200}}},_e=e=>/^@[^/]+\/picgo-plugin-/.test(e)?"scope":e.startsWith("picgo-plugin-")?"normal":Ie(e)?"simple":"unknown",Ie=e=>{if(v.default.isAbsolute(e))return!1;const t=v.default.join(process.cwd(),e);return!$.default.existsSync(t)&&(!e.includes("/")&&!e.includes("\\"))},fe=(e,t="")=>t?`@${t}/picgo-plugin-${e}`:`picgo-plugin-${e}`,he=e=>e.split(v.default.sep).join("/"),Pe=(e,t=!1)=>{if(e.includes("@")){let n=/(.+\/)?(picgo-plugin-\w+)(@.+)*/;t&&(n=/(.+\/)?(^@[^/]+\/picgo-plugin-\w+)(@.+)*/);const r=e.match(n);return r?r[2]:(console.warn("can not remove plugin version"),e)}return e},Ce=[],me=e=>Ce.some((t=>e.startsWith(t))),Ue=e=>"object"==typeof e&&!Array.isArray(e)&&Object.keys(e).length>0;function Ne(e){try{return JSON.parse(e)}catch(t){return e}}const Le={handle:e=>{e.cmd.program.command("upload").description("upload, go go go").arguments("[input...]").alias("u").action((t=>{(async()=>{const n=t.map((e=>pe(e)?e:v.default.resolve(e))).filter((t=>{const n=$.default.existsSync(t)||pe(t);return n||e.log.warn(`${t} does not exist.`),n}));await e.upload(n)})().catch((t=>{e.log.error(t)}))}))}},Se=async(e,t,n,r)=>{const i=await e.cmd.inquirer.prompt(t),s="uploader"===n?`picBed.${r}`:"transformer"===n?`transformer.${r}`:r;e.saveConfig({[s]:i})},De={handle:e=>{e.cmd.program.command("set").alias("config").arguments("<module> [name]").description("configure config of picgo modules").action(((t,n)=>{(async()=>{var r,i;try{switch(t){case"uploader":case"transformer":if(n){const r=e.helper[t].get(n);if(!r)return e.log.error(`No ${t} named ${n}`);r.config&&await Se(e,r.config(e),t,n)}else{const n=[{type:"list",name:`${t}`,choices:e.helper[t].getIdList(),message:`Choose a(n) ${t}`}],r=await e.cmd.inquirer.prompt(n),i=e.helper[t].get(r[t]);(null==i?void 0:i.config)&&await Se(e,i.config(e),t,r[t])}break;case"plugin":if(n){if(n.includes("picgo-plugin-")||(n=`picgo-plugin-${n}`),!Object.keys(e.getConfig("picgoPlugins")).includes(n))return e.log.error(`No plugin named ${n}`);(null===(r=e.pluginLoader.getPlugin(n))||void 0===r?void 0:r.config)&&await Se(e,e.pluginLoader.getPlugin(n).config(e),"plugin",n)}else{const t=[{type:"list",name:"plugin",choices:e.pluginLoader.getFullList(),message:"Choose a plugin"}],n=await e.cmd.inquirer.prompt(t);(null===(i=e.pluginLoader.getPlugin(n.plugin))||void 0===i?void 0:i.config)&&await Se(e,e.pluginLoader.getPlugin(n.plugin).config(e),"plugin",n.plugin)}break;default:return e.log.warn(`No module named ${t}`),e.log.warn("Available modules are uploader|transformer|plugin")}const s="plugin"===t?"plugins":t;e.log.success("Configure config successfully!"),e.log.info(`If you want to use this config, please run 'picgo use ${s}'`)}catch(t){if(e.log.error(t),process.argv.includes("--debug"))throw t}})().catch((t=>{e.log.error(t)}))}))}},Ae={handle:async e=>{const t=e.cmd;t.program.command("use").arguments("[module]").description("use modules of picgo").action((n=>{(async()=>{try{let r=[];const i={uploader:{type:"list",name:"uploader",message:"Use an uploader",choices:e.helper.uploader.getIdList(),default:e.getConfig("picBed.uploader")||e.getConfig("picBed.current")||"github"},transformer:{type:"list",name:"transformer",message:"Use a transformer",choices:e.helper.transformer.getIdList(),default:e.getConfig("picBed.transformer")||"path"},plugins:{type:"checkbox",name:"plugins",message:"Use plugins",choices:e.pluginLoader.getFullList(),default:Object.keys(e.getConfig("picgoPlugins")).filter((t=>e.getConfig(`picgoPlugins.${t}`)))}};if(n){if(!i[n])return e.log.warn(`No module named ${n}`),e.log.warn("Available modules are uploader|transformer|plugins");r.push(i[n])}else r=Object.keys(i).map((e=>i[e]));const s=await t.inquirer.prompt(r);if(s.plugins){const t=e.getConfig("picgoPlugins");Object.keys(t).map((e=>{s.plugins.includes(e)?t[e]=!0:t[e]=!1})),e.saveConfig({picgoPlugins:t})}e.saveConfig({"picBed.current":s.uploader||e.getConfig("picBed.current"),"picBed.uploader":s.uploader||e.getConfig("picBed.current"),"picBed.transformer":s.transformer||"path"}),e.log.success("Configure config successfully!")}catch(t){if(e.log.error(t),process.argv.includes("--debug"))throw t}})().catch((t=>{e.log.error(t)}))}))}},Te={handle:e=>{e.cmd.program.option("-p, --proxy <url>","set proxy for uploading",(t=>{e.setConfig({"picBed.proxy":t})}))}},ye=async(e,t)=>{try{const n=Be(t.tmp),r=v.default.join(t.tmp,"template");let i={};n.prompts&&n.prompts.length>0&&(i=await e.cmd.inquirer.prompt(n.prompts));let s=await k.default(["**/*"],{cwd:r,dot:!0});if(s=s.filter((t=>{let r="";return Object.keys(n.filters).forEach((e=>{q.default(t,e,{dot:!0})&&(r=t)})),!r||Oe(e,n.filters[r],i)})),0===s.length)return e.log.warn("Template files not found!");const a=be(s,r,i);xe(t.dest,a),"function"==typeof n.complete&&n.complete({answers:i,options:t,files:s,ctx:e}),n.completeMessage&&e.log.success(n.completeMessage),e.log.success("Done!")}catch(t){return e.log.error(t)}},Oe=(e,t,n)=>{const r=new Function("data","with (data) { return "+t+"}");try{return r(n)}catch(n){return e.log.error(`Error when evaluating filter condition: ${JSON.stringify(t)}`),!1}},Be=e=>{const t=v.default.join(e,"index.js");if($.default.existsSync(t)){return require(t)}return{}},be=(e,t,n)=>{const r={};return e.forEach((e=>{const i=$.default.readFileSync(v.default.join(t,e),"utf8"),s=K.default.render(i,n);(Buffer.isBuffer(s)||/[^\s]/.test(s))&&(r[e]=s)})),r},xe=(e,t)=>{Object.keys(t).forEach((n=>{const r=v.default.join(e,n);$.default.ensureDirSync(v.default.dirname(r)),$.default.writeFileSync(r,t[n])}))},we=(e,t)=>{t.offline?$.default.existsSync(t.template)?ye(e,t).catch((t=>{e.log.error(t)})):e.log.error(`Local template ${t.template} not found`):(t.template=t.hasSlash?t.template:"PicGo/picgo-template-"+t.template,Re(e,t))},Re=(e,t)=>{$.default.existsSync(t.tmp)&&j.default.sync(t.tmp),e.log.info("Template files are downloading..."),Y.default(t.template,t.tmp,{clone:t.clone},(n=>{if(n)return e.log.error(n);e.log.success("Template files are downloaded!"),ye(e,t).catch((t=>{e.log.error(t)}))}))},Ge={handle:async e=>{e.cmd.program.command("init").arguments("<template> [project]").option("--clone","use git clone").option("--offline","use cached template").description("create picgo plugin's development templates").action(((t,n,i)=>{(async()=>{try{const s=t.includes("/"),a=!n||"."===n,o=v.default.resolve(n||"."),l=i.clone||!1,u=i.offline||!1,c=v.default.join(r.homedir(),".picgo/templates",t.replace(/[/:]/g,"-"));i.offline&&(t=c);const d={template:t,project:n,hasSlash:s,inPlace:a,dest:o,clone:l,tmp:c,offline:u};a||$.default.existsSync(o)?await e.cmd.inquirer.prompt([{type:"confirm",message:a?"Generate project in current directory?":"Target directory exists. Continue?",name:"ok"}]).then((t=>{t.ok&&we(e,d)})):we(e,d)}catch(t){if(e.log.error(t),process.argv.includes("--debug"))throw t}})().catch((t=>{e.log.error(t)}))})).on("--help",(()=>{console.log(),console.log("Examples:"),console.log(),console.log(F.default.gray("  # create a new project with an official template")),console.log("  $ picgo init plugin my-project"),console.log(),console.log(F.default.gray("  # create a new project straight from a github template")),console.log("  $ picgo init username/repo my-project"),console.log()}))}},$e={handle:e=>{e.cmd.program.command("i18n").arguments("[lang]").description("change picgo language").action((async(t="")=>{const n=e.i18n.getLanguageList();if(!t){const t=[{type:"list",name:"i18n",choices:n,message:"Choose a language",default:e.getConfig("settings.language")||"zh-CN"}],r=await e.cmd.inquirer.prompt(t);return e.i18n.setLanguage(r.i18n),void e.log.success(`Language set to ${r.i18n}`)}if(!n.includes(t))return e.log.warn("No such language");e.i18n.setLanguage(t),e.log.success(`Language set to ${t}`)}))}};class ve{constructor(e){this.name=e,this.list=new Map,this.pluginIdMap=new Map}register(e,t){var n;if(!e)throw new TypeError("id is required!");if("function"!=typeof t.handle)throw new TypeError("plugin.handle must be a function!");if(this.list.has(e))throw new TypeError(`${this.name} duplicate id: ${e}!`);this.list.set(e,t),ve.currentPlugin&&(this.pluginIdMap.has(ve.currentPlugin)?null===(n=this.pluginIdMap.get(ve.currentPlugin))||void 0===n||n.push(e):this.pluginIdMap.set(ve.currentPlugin,[e]))}unregister(e){if(this.pluginIdMap.has(e)){const t=this.pluginIdMap.get(e);null==t||t.forEach((e=>{this.list.delete(e)}))}}getName(){return this.name}get(e){return this.list.get(e)}getList(){return[...this.list.values()]}getIdList(){return[...this.list.keys()]}}const Me=(e=null)=>{ve.currentPlugin=e};class He{constructor(e){this.name="commander",this.list=new Map,this.pluginIdMap=new Map,this.program=new i.Command,this.inquirer=H.default,this.ctx=e}getName(){return this.name}init(){var e;this.program.version("1.7.0","-v, --version").option("-d, --debug","debug mode",(()=>{this.ctx.setConfig({debug:!0})})).option("-s, --silent","silent mode",(()=>{this.ctx.setConfig({silent:!0})})).on("command:*",(()=>{this.ctx.log.error(`Invalid command: ${this.program.args.join(" ")}\nSee --help for a list of available commands.`),process.exit(1)})),(e=this.ctx).cmd.register("pluginHandler",ce),e.cmd.register("config",de),e.cmd.register("setting",De),e.cmd.register("upload",Le),e.cmd.register("use",Ae),e.cmd.register("proxy",Te),e.cmd.register("init",Ge),e.cmd.register("i18n",$e)}register(e,t){var n;if(!e)throw new TypeError("name is required!");if("function"!=typeof t.handle)throw new TypeError("plugin.handle must be a function!");if(this.list.has(e))throw new TypeError(`${this.name} plugin duplicate id: ${e}!`);this.list.set(e,t);const r=ve.currentPlugin;null!==r&&(this.pluginIdMap.has(r)?null===(n=this.pluginIdMap.get(r))||void 0===n||n.push(e):this.pluginIdMap.set(r,[e]))}unregister(e){if(this.pluginIdMap.has(e)){const t=this.pluginIdMap.get(e);null==t||t.forEach((e=>{this.list.delete(e)}))}}loadCommands(){this.getList().forEach((e=>{try{e.handle(this.ctx)}catch(e){this.ctx.log.error(e)}}))}get(e){return this.list.get(e)}getList(){return[...this.list.values()]}getIdList(){return[...this.list.keys()]}}var Fe,qe,ke;!function(e){e.success="success",e.info="info",e.warn="warn",e.error="error"}(Fe||(Fe={})),function(e){e.UPLOAD_PROGRESS="uploadProgress",e.FAILED="failed",e.BEFORE_TRANSFORM="beforeTransform",e.BEFORE_UPLOAD="beforeUpload",e.AFTER_UPLOAD="afterUpload",e.FINISHED="finished",e.INSTALL="install",e.UNINSTALL="uninstall",e.UPDATE="update",e.NOTIFICATION="notification"}(qe||(qe={})),function(e){e.CONFIG_CHANGE="CONFIG_CHANGE"}(ke||(ke={}));class Ke{constructor(e){this.level={[Fe.success]:"green",[Fe.info]:"blue",[Fe.warn]:"yellow",[Fe.error]:"red"},this.ctx=e}handleLog(e,...t){if(!this.ctx.getConfig("silent")){const n=F.default[this.level[e]](`[PicGo ${e.toUpperCase()}]:`);console.log(n,...t),this.logLevel=this.ctx.getConfig("settings.logLevel"),this.logPath=this.ctx.getConfig("settings.logPath")||v.default.join(this.ctx.baseDir,"./picgo.log"),setTimeout((()=>{try{const n=this.checkLogFileIsLarge(this.logPath);if(n.isLarge){const e=`Log file is too large (> ${n.logFileSizeLimit/1024/1024||"10"} MB), recreate log file`;console.log(F.default.yellow("[PicGo WARN]:"),e),this.recreateLogFile(this.logPath),t.unshift(e)}this.handleWriteLog(this.logPath,e,...t)}catch(e){console.error("[PicGo Error] on checking log file size",e)}}),0)}}checkLogFileIsLarge(e){if($.default.existsSync(e)){const t=$.default.statSync(e).size,n=1024*((e=0)=>isNaN(Number(e))?0:Number(e))(this.ctx.getConfig("settings.logFileSizeLimit")||10)*1024;return{isLarge:t>n,logFileSize:t,logFileSizeLimit:n}}return{isLarge:!1}}recreateLogFile(e){$.default.existsSync(e)&&($.default.unlinkSync(e),$.default.createFileSync(e))}handleWriteLog(e,t,...n){try{if(this.checkLogLevel(t,this.logLevel)){let r=`${Q.default().format("YYYY-MM-DD HH:mm:ss")} [PicGo ${t.toUpperCase()}] `;n.forEach((e=>{e instanceof Error&&"error"===t?r+=`\n------Error Stack Begin------\n${W.default.format(null==e?void 0:e.stack)}\n-------Error Stack End------- `:("object"==typeof e&&(e=JSON.stringify(e,null,2)),r+=`${e} `)})),r+="\n",$.default.appendFileSync(e,r)}}catch(e){console.error("[PicGo Error] on writing log file",e)}}checkLogLevel(e,t){return void 0===t||"all"===t||(Array.isArray(t)?t.some((t=>t===e||"all"===t)):e===t)}success(...e){return this.handleLog(Fe.success,...e)}info(...e){return this.handleLog(Fe.info,...e)}error(...e){return this.handleLog(Fe.error,...e)}warn(...e){return this.handleLog(Fe.warn,...e)}debug(...e){"development"===process.env.NODE_ENV&&this.handleLog(Fe.info,...e)}}class Ye extends n.EventEmitter{constructor(e){super(),this.ctx=e}async start(e){const t=(e=>({configPath:e.configPath,baseDir:e.baseDir,log:e.log,cmd:e.cmd,output:[],input:[],pluginLoader:e.pluginLoader,pluginHandler:e.pluginHandler,Request:e.Request,helper:e.helper,VERSION:e.VERSION,GUI_VERSION:e.GUI_VERSION,request:e.request,i18n:e.i18n,getConfig:e.getConfig.bind(e),saveConfig:e.saveConfig.bind(e),removeConfig:e.removeConfig.bind(e),setConfig:e.setConfig.bind(e),unsetConfig:e.unsetConfig.bind(e),upload:e.upload.bind(e),addListener:e.addListener.bind(e),on:e.on.bind(e),once:e.once.bind(e),removeListener:e.removeListener.bind(e),off:e.off.bind(e),removeAllListeners:e.removeAllListeners.bind(e),setMaxListeners:e.setMaxListeners.bind(e),getMaxListeners:e.getMaxListeners.bind(e),listeners:e.listeners.bind(e),rawListeners:e.rawListeners.bind(e),emit:e.emit.bind(e),listenerCount:e.listenerCount.bind(e),prependListener:e.prependListener.bind(e),prependOnceListener:e.prependOnceListener.bind(e),eventNames:e.eventNames.bind(e)}))(this.ctx);try{if(!Array.isArray(e))throw new Error("Input must be an array.");return t.input=e,t.output=[],await this.beforeTransform(t),await this.doTransform(t),await this.beforeUpload(t),await this.doUpload(t),await this.afterUpload(t),t}catch(e){if(t.log.warn(qe.FAILED),t.emit(qe.UPLOAD_PROGRESS,-1),t.emit(qe.FAILED,e),t.log.error(e),t.getConfig("debug"))throw e;return t}}async beforeTransform(e){return e.emit(qe.UPLOAD_PROGRESS,0),e.emit(qe.BEFORE_TRANSFORM,e),e.log.info("Before transform"),await this.handlePlugins(e.helper.beforeTransformPlugins,e),e}async doTransform(e){e.emit(qe.UPLOAD_PROGRESS,30);const t=e.getConfig("picBed.transformer")||"path";let n=t,r=e.helper.transformer.get(t);return r||(r=e.helper.transformer.get("path"),n="path",e.log.warn(`Can't find transformer - ${t}, switch to default transformer - path`)),e.log.info(`Transforming... Current transformer is [${n}]`),await(null==r?void 0:r.handle(e)),e}async beforeUpload(e){return e.emit(qe.UPLOAD_PROGRESS,60),e.log.info("Before upload"),e.emit(qe.BEFORE_UPLOAD,e),await this.handlePlugins(e.helper.beforeUploadPlugins,e),e}async doUpload(e){let t=e.getConfig("picBed.uploader")||e.getConfig("picBed.current")||"github",n=e.helper.uploader.get(t),r=t;n||(t="github",r="github",n=e.helper.uploader.get("github"),e.log.warn(`Can't find uploader - ${t}, switch to default uploader - github`)),e.log.info(`Uploading... Current uploader is [${r}]`),await(null==n?void 0:n.handle(e));for(const n of e.output)n.type=t;return e}async afterUpload(e){e.emit(qe.AFTER_UPLOAD,e),e.emit(qe.UPLOAD_PROGRESS,100),await this.handlePlugins(e.helper.afterUploadPlugins,e);let t="";const n=e.output.length;for(let r=0;r<n;r++)void 0!==e.output[r].imgUrl&&(t+=ge(e.output[r].imgUrl),r!==n-1&&(t+="\n")),delete e.output[r].base64Image,delete e.output[r].buffer;return e.emit(qe.FINISHED,e),e.log.success(`\n${t}`),e}async handlePlugins(e,t){const n=e.getList(),r=e.getIdList(),i=e.getName();return await Promise.all(n.map((async(e,n)=>{try{t.log.info(`${i}: ${r[n]} running`),await e.handle(t)}catch(e){throw t.log.error(`${i}: ${r[n]} error`),e}}))),t}}const je=(e,t)=>{const n=e.secretId,r=e.secretKey,i=e.appId,s=e.bucket;let a,o="";if(e.version&&"v4"!==e.version){const n=Math.floor((new Date).getTime()/1e3);o=`${n};${n+86400}`;const i=z.default.createHmac("sha1",r).update(o).digest("hex"),s=`put\n/${e.path}${t}\n\nhost=${e.bucket}.cos.${e.area}.myqcloud.com\n`,l=`sha1\n${o}\n${z.default.createHash("sha1").update(s).digest("hex")}\n`;a=z.default.createHmac("sha1",i).update(l).digest("hex")}else{const e=Math.floor(1e10*Math.random()),t=Math.floor((new Date).getTime()/1e3)-1,o=`a=${i}&b=${s}&k=${n}&e=${t+3600}&t=${t}&r=${e}&f=`,l=z.default.createHmac("sha1",r).update(o).digest(),u=Buffer.concat([l,Buffer.from(o)]);a=Buffer.from(u).toString("base64")}return{signature:a,appId:i,bucket:s,signTime:o}},Qe=(e,t,n,r,i)=>{const s=e.area,a=e.path;return e.version&&"v4"!==e.version?{method:"PUT",url:`http://${e.bucket}.cos.${e.area}.myqcloud.com/${encodeURIComponent(a)}${encodeURIComponent(t)}`,headers:{Authorization:`q-sign-algorithm=sha1&q-ak=${e.secretId}&q-sign-time=${n.signTime}&q-key-time=${n.signTime}&q-header-list=host&q-url-param-list=&q-signature=${n.signature}`,contentType:V.default.lookup(t),userAgent:`PicGo;${i};null;null`},body:r,resolveWithFullResponse:!0}:{method:"POST",url:`http://${s}.file.myqcloud.com/files/v2/${n.appId}/${n.bucket}/${encodeURI(a)}${t}`,headers:{Authorization:n.signature,contentType:"multipart/form-data",userAgent:`PicGo;${i};null;null`},formData:{op:"upload",filecontent:r},resolveWithFullResponse:!0}},We=async e=>{var t,n,r;const i=e.getConfig("picBed.tcyun");if(!i)throw new Error("Can't find tencent COS config");try{const s=e.output,a=i.customUrl,o=i.path,l=!i.version||"v4"===i.version;for(const u of s)if(u.fileName&&u.buffer){const s=je(i,u.fileName);if(!s)return!1;let c=u.buffer;!c&&u.base64Image&&(c=Buffer.from(u.base64Image,"base64"));const d=Qe(i,u.fileName,s,c,e.GUI_VERSION||e.VERSION),p=await e.request(d).then((e=>e)).catch((t=>({statusCode:400,body:{msg:e.i18n.translate("AUTH_FAILED"),err:t}})));let g;if(g=l&&"string"==typeof p?JSON.parse(p):p,400===g.statusCode)throw(null===(t=null==g?void 0:g.body)||void 0===t?void 0:t.err)?g.body.err:new Error((null===(n=null==g?void 0:g.body)||void 0===n?void 0:n.msg)||(null===(r=null==g?void 0:g.body)||void 0===r?void 0:r.message));const E=i.options||"";if(l&&"SUCCESS"===g.message)delete u.base64Image,delete u.buffer,u.imgUrl=a?`${a}/${o}${u.fileName}`:`${g.data.source_url}${E}`;else{if(l||!g||200!==g.statusCode)throw new Error(p.body.msg);delete u.base64Image,delete u.buffer,u.imgUrl=a?`${a}/${encodeURI(o)}${encodeURI(u.fileName)}${E}`:`https://${i.bucket}.cos.${i.area}.myqcloud.com/${encodeURI(o)}${encodeURI(u.fileName)}${E}`}}return e}catch(t){if(!i.version||"v4"===i.version)try{const n=JSON.parse(t.error);e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("UPLOAD_FAILED_REASON",{code:n.code}),text:"https://cloud.tencent.com/document/product/436/8432"})}catch(e){}throw t}},ze=e=>{const t=e.getConfig("picBed.tcyun")||{};return[{name:"version",type:"list",alias:e.i18n.translate("PICBED_TENCENTCLOUD_VERSION"),choices:["v4","v5"],default:"v5",required:!1},{name:"secretId",type:"input",get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_SECRETID")},default:t.secretId||"",required:!0},{name:"secretKey",type:"password",get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_SECRETKEY")},default:t.secretKey||"",required:!0},{name:"bucket",type:"input",get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_BUCKET")},default:t.bucket||"",required:!0},{name:"appId",type:"input",get prefix(){return e.i18n.translate("PICBED_TENCENTCLOUD_APPID")},get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_APPID")},default:t.appId||"",get message(){return e.i18n.translate("PICBED_TENCENTCLOUD_MESSAGE_APPID")},required:!0},{name:"area",type:"input",get prefix(){return e.i18n.translate("PICBED_TENCENTCLOUD_AREA")},get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_AREA")},default:t.area||"",get message(){return e.i18n.translate("PICBED_TENCENTCLOUD_MESSAGE_AREA")},required:!0},{name:"path",type:"input",get prefix(){return e.i18n.translate("PICBED_TENCENTCLOUD_PATH")},get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_PATH")},default:t.path||"",get message(){return e.i18n.translate("PICBED_TENCENTCLOUD_MESSAGE_PATH")},required:!1},{name:"customUrl",type:"input",get prefix(){return e.i18n.translate("PICBED_TENCENTCLOUD_CUSTOMURL")},get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_CUSTOMURL")},default:t.customUrl||"",get message(){return e.i18n.translate("PICBED_TENCENTCLOUD_MESSAGE_CUSTOMURL")},required:!1},{name:"options",type:"input",default:t.options||"",get prefix(){return e.i18n.translate("PICBED_TENCENTCLOUD_OPTIONS")},get alias(){return e.i18n.translate("PICBED_TENCENTCLOUD_OPTIONS")},get message(){return e.i18n.translate("PICBED_TENCENTCLOUD_MESSAGE_OPTIONS")},required:!1}]};const Ve=(e,t,n)=>{const r=t.path||"",{token:i,repo:s}=t;return{method:"PUT",url:`https://api.github.com/repos/${s}/contents/${encodeURI(r)}${encodeURI(e)}`,headers:{Authorization:`token ${i}`,"User-Agent":"PicGo","Content-Type":V.default.lookup(e)},body:n,json:!0}},Je=async e=>{const t=e.getConfig("picBed.github");if(!t)throw new Error("Can't find github config");try{const n=e.output;for(const r of n)if(r.fileName&&r.buffer){const n=r.base64Image||Buffer.from(r.buffer).toString("base64"),i={message:"Upload by PicGo",branch:t.branch,content:n,path:t.path+encodeURI(r.fileName)},s=Ve(r.fileName,t,i),a=await e.request(s);if(!a)throw new Error("Server error, please try again");delete r.base64Image,delete r.buffer,t.customUrl?r.imgUrl=`${t.customUrl}/${t.path}${r.fileName}`:r.imgUrl=a.content.download_url}return e}catch(t){throw e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("CHECK_SETTINGS_AND_NETWORK")}),t}},Xe=e=>{const t=e.getConfig("picBed.github")||{};return[{name:"repo",type:"input",get prefix(){return e.i18n.translate("PICBED_GITHUB_REPO")},get alias(){return e.i18n.translate("PICBED_GITHUB_REPO")},get message(){return e.i18n.translate("PICBED_GITHUB_MESSAGE_REPO")},default:t.repo||"",required:!0},{name:"branch",type:"input",get prefix(){return e.i18n.translate("PICBED_GITHUB_BRANCH")},get alias(){return e.i18n.translate("PICBED_GITHUB_BRANCH")},get message(){return e.i18n.translate("PICBED_GITHUB_MESSAGE_BRANCH")},default:t.branch||"master",required:!0},{name:"token",type:"password",get alias(){return e.i18n.translate("PICBED_GITHUB_TOKEN")},default:t.token||"",required:!0},{name:"path",type:"input",get prefix(){return e.i18n.translate("PICBED_GITHUB_PATH")},get alias(){return e.i18n.translate("PICBED_GITHUB_PATH")},get message(){return e.i18n.translate("PICBED_GITHUB_MESSAGE_PATH")},default:t.path||"",required:!1},{name:"customUrl",type:"input",get prefix(){return e.i18n.translate("PICBED_GITHUB_CUSTOMURL")},get alias(){return e.i18n.translate("PICBED_GITHUB_CUSTOMURL")},get message(){return e.i18n.translate("PICBED_GITHUB_MESSAGE_CUSTOMURL")},default:t.customUrl||"",required:!1}]};function Ze(e,t,n,r){const i=function(e){return"z0"===e?"":"-"+e}(e.area||"z0"),s=e.path||"";return{method:"POST",url:`http://upload${i}.qiniup.com/putb64/-1/key/${Buffer.from(s+t,"utf-8").toString("base64").replace(/\+/g,"-").replace(/\//g,"_")}`,headers:{Authorization:`UpToken ${n}`,"Content-Type":V.default.lookup(t)||"application/octet-stream"},body:r}}function et(e){const t=e.accessKey,n=e.secretKey,r=new J.default.auth.digest.Mac(t,n),i={scope:e.bucket};return new J.default.rs.PutPolicy(i).uploadToken(r)}const tt=async e=>{const t=e.getConfig("picBed.qiniu");if(!t)throw new Error("Can't find qiniu config");try{const n=e.output;for(const r of n)if(r.fileName&&r.buffer){const n=r.base64Image||Buffer.from(r.buffer).toString("base64"),i=Ze(t,r.fileName,et(t),n),s=await e.request(i),a=JSON.parse(s);if(!(null==a?void 0:a.key))throw e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:a.msg}),e.log.error("qiniu error",a),new Error("Upload failed");{delete r.base64Image,delete r.buffer;const e=t.url,n=t.options;r.imgUrl=`${e}/${a.key}${n}`}}return e}catch(t){if("Upload failed"!==t.message&&t.response){const n=t.response.body;e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:n.error})}throw t}},nt=e=>{const t=e.getConfig("picBed.qiniu")||{};return[{name:"accessKey",type:"input",get alias(){return e.i18n.translate("PICBED_QINIU_ACCESSKEY")},default:t.accessKey||"",required:!0},{name:"secretKey",type:"password",get alias(){return e.i18n.translate("PICBED_QINIU_SECRETKEY")},default:t.secretKey||"",required:!0},{name:"bucket",type:"input",get alias(){return e.i18n.translate("PICBED_QINIU_BUCKET")},default:t.bucket||"",required:!0},{name:"url",type:"input",get prefix(){return e.i18n.translate("PICBED_QINIU_URL")},get alias(){return e.i18n.translate("PICBED_QINIU_URL")},get message(){return e.i18n.translate("PICBED_QINIU_MESSAGE_URL")},default:t.url||"",required:!0},{name:"area",type:"input",get prefix(){return e.i18n.translate("PICBED_QINIU_AREA")},get alias(){return e.i18n.translate("PICBED_QINIU_AREA")},get message(){return e.i18n.translate("PICBED_QINIU_MESSAGE_AREA")},default:t.area||"",required:!0},{name:"options",type:"input",get prefix(){return e.i18n.translate("PICBED_QINIU_OPTIONS")},get alias(){return e.i18n.translate("PICBED_QINIU_OPTIONS")},get message(){return e.i18n.translate("PICBED_QINIU_MESSAGE_OPTIONS")},default:t.options||"",required:!1},{name:"path",type:"input",get prefix(){return e.i18n.translate("PICBED_QINIU_PATH")},get alias(){return e.i18n.translate("PICBED_QINIU_PATH")},get message(){return e.i18n.translate("PICBED_QINIU_MESSAGE_PATH")},default:t.path||"",required:!1}]};const rt=e=>{let t=e;return t instanceof ArrayBuffer&&(t=Z.default(t)),t},it=(e,t)=>{const n=(new Date).toUTCString(),r=V.default.lookup(t);if(!r)throw Error(`No mime type found for file ${t}`);const i=`PUT\n\n${r}\n${n}\n/${e.bucket}/${e.path}${t}`,s=z.default.createHmac("sha1",e.accessKeySecret).update(i).digest("base64");return`OSS ${e.accessKeyId}:${s}`},st=(e,t,n,r)=>({method:"PUT",url:`https://${e.bucket}.${e.area}.aliyuncs.com/${encodeURI(e.path)}${encodeURI(t)}`,headers:{Host:`${e.bucket}.${e.area}.aliyuncs.com`,Authorization:n,Date:(new Date).toUTCString(),"Content-Type":V.default.lookup(t)},body:r,resolveWithFullResponse:!0}),at=async e=>{var t;e||await(async e=>{const t=e.getConfig("picBed.aliyun");if(!t)throw new Error("Can't find aliYun OSS config");try{const n=e.output,r=t.customUrl,i=t.path;for(const s of n)if(s.fileName&&s.buffer){const n=it(t,s.fileName);let a=s.buffer;!a&&s.base64Image&&(a=Buffer.from(s.base64Image,"base64"));const o=st(t,s.fileName,n,a);if(200!==(await e.request(o)).statusCode)throw new Error("Upload failed");{delete s.base64Image,delete s.buffer;const e=t.options||"";s.imgUrl=r?`${r}/${i}${s.fileName}${e}`:`https://${t.bucket}.${t.area}.aliyuncs.com/${i}${s.fileName}${e}`}}return e}catch(t){throw e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("CHECK_SETTINGS")}),t}})(e),console.warn("Using stream mode for aliyun upload, added by terwer, see https://github.com/terwer/Electron-PicGo-Core/blob/dev/src/plugins/uploader/aliyun.ts#L76");const n=e.getConfig("picBed.aliyun");if(!n)throw new Error("Can't find aliYun OSS config");try{const r=new X.default({region:n.area,accessKeyId:n.accessKeyId,accessKeySecret:n.accessKeySecret,bucket:n.bucket}),i=e.output,s=n.customUrl,a=n.path;for(const e of i)if(e.fileName&&e.buffer){let i=rt(e.buffer);!i&&e.base64Image&&(i=Buffer.from(e.base64Image,"base64"));const o=n.options||"",l=`${a}${e.fileName}${o}`,u=C.Readable.from(i),c=await r.putStream(l,u);if(console.log("Using aliyun SDK for upload add by terwer, result=>",c),!(null===(t=null==c?void 0:c.res)||void 0===t?void 0:t.status)||200!==c.res.status)throw new Error("Upload failed");delete e.base64Image,delete e.buffer,e.imgUrl=s?`${s}/${a}${e.fileName}${o}`:`https://${n.bucket}.${n.area}.aliyuncs.com/${a}${e.fileName}${o}`}return e}catch(t){throw e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("CHECK_SETTINGS")}),t}},ot=e=>{const t=e.getConfig("picBed.aliyun")||{};return[{name:"accessKeyId",type:"input",get alias(){return e.i18n.translate("PICBED_ALICLOUD_ACCESSKEYID")},default:t.accessKeyId||"",required:!0},{name:"accessKeySecret",type:"password",get alias(){return e.i18n.translate("PICBED_ALICLOUD_ACCESSKEYSECRET")},default:t.accessKeySecret||"",required:!0},{name:"bucket",type:"input",get alias(){return e.i18n.translate("PICBED_ALICLOUD_BUCKET")},default:t.bucket||"",required:!0},{name:"area",type:"input",get prefix(){return e.i18n.translate("PICBED_ALICLOUD_AREA")},get alias(){return e.i18n.translate("PICBED_ALICLOUD_AREA")},default:t.area||"",get message(){return e.i18n.translate("PICBED_ALICLOUD_MESSAGE_AREA")},required:!0},{name:"path",type:"input",get prefix(){return e.i18n.translate("PICBED_ALICLOUD_PATH")},get alias(){return e.i18n.translate("PICBED_ALICLOUD_PATH")},get message(){return e.i18n.translate("PICBED_ALICLOUD_MESSAGE_PATH")},default:t.path||"",required:!1},{name:"customUrl",type:"input",get prefix(){return e.i18n.translate("PICBED_ALICLOUD_CUSTOMURL")},get alias(){return e.i18n.translate("PICBED_ALICLOUD_CUSTOMURL")},get message(){return e.i18n.translate("PICBED_ALICLOUD_MESSAGE_CUSTOMURL")},default:t.customUrl||"",required:!1},{name:"options",type:"input",get prefix(){return e.i18n.translate("PICBED_ALICLOUD_OPTIONS")},get alias(){return e.i18n.translate("PICBED_ALICLOUD_OPTIONS")},get message(){return e.i18n.translate("PICBED_ALICLOUD_MESSAGE_OPTIONS")},default:t.options||"",required:!1}]};const lt=(e,t)=>{const n=e.path||"",r=e.operator,i=e.password,s=ee.default(i),a=(new Date).toUTCString(),o=`PUT&${`/${e.bucket}/${encodeURI(n)}${encodeURI(t)}`}&${a}`;return`UPYUN ${r}:${z.default.createHmac("sha1",s).update(o).digest("base64")}`},ut=(e,t,n,r)=>{const i=e.bucket,s=e.path||"";return{method:"PUT",url:`https://v0.api.upyun.com/${i}/${encodeURI(s)}${encodeURI(t)}`,headers:{Authorization:n,Date:(new Date).toUTCString(),"Content-Type":V.default.lookup(t)||"application/octet-stream"},body:r,resolveWithFullResponse:!0}},ct=async e=>{e||await(async e=>{const t=e.getConfig("picBed.upyun");if(!t)throw new Error("Can't find upYun config");try{const n=e.output,r=t.path||"";for(const i of n)if(i.fileName&&i.buffer){let n=i.buffer;!n&&i.base64Image&&(n=Buffer.from(i.base64Image,"base64"));const s=lt(t,i.fileName),a=ut(t,i.fileName,s,n);if(200!==(await e.request(a)).statusCode)throw new Error("Upload failed");delete i.base64Image,delete i.buffer,i.imgUrl=`${t.url}/${r}${i.fileName}${t.options}`}return e}catch(t){if("Upload failed"===t.message)e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("CHECK_SETTINGS")});else{const n=Ne(t.error);e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("UPLOAD_FAILED_REASON",{code:"object"==typeof n?n.code:n}),text:"http://docs.upyun.com/api/errno/"})}throw t}})(e),console.warn("Using stream mode for upyun upload, added by terwer, see https://github.com/terwer/Electron-PicGo-Core/blob/dev/src/plugins/uploader/upyun.ts#L88");const t=e.getConfig("picBed.upyun");if(!t)throw new Error("Can't find upYun config");try{const n=t.bucket,r=t.operator,i=t.password,s=new te.default.Service(n,r,i),a=new te.default.Client(s),o=e.output;for(const e of o)if(e.fileName&&e.buffer){let n=rt(e.buffer);!n&&e.base64Image&&(n=Buffer.from(e.base64Image,"base64"));const r=t.path||"",i=`${r}${e.fileName}${t.options}`,s=C.Readable.from(n),o=await a.putFile(i,s);if(console.log("Using upyun SDK for upload add by terwer, res=>",o),!o)throw new Error("Upload failed");delete e.base64Image,delete e.buffer,e.imgUrl=`${t.url}/${r}${e.fileName}${t.options}`}return e}catch(t){if("Upload failed"===t.message)e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("CHECK_SETTINGS")});else{const n=Ne(t.error);e.emit(qe.NOTIFICATION,{title:e.i18n.translate("UPLOAD_FAILED"),body:e.i18n.translate("UPLOAD_FAILED_REASON",{code:"object"==typeof n?n.code:n}),text:"http://docs.upyun.com/api/errno/"})}throw t}},dt=e=>{const t=e.getConfig("picBed.upyun")||{};return[{name:"bucket",type:"input",get alias(){return e.i18n.translate("PICBED_UPYUN_BUCKET")},default:t.bucket||"",required:!0},{name:"operator",type:"input",get alias(){return e.i18n.translate("PICBED_UPYUN_OPERATOR")},get prefix(){return e.i18n.translate("PICBED_UPYUN_OPERATOR")},get message(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_OPERATOR")},default:t.operator||"",required:!0},{name:"password",type:"password",get prefix(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_PASSWORD")},get alias(){return e.i18n.translate("PICBED_UPYUN_PASSWORD")},get message(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_PASSWORD")},default:t.password||"",required:!0},{name:"url",type:"input",get alias(){return e.i18n.translate("PICBED_UPYUN_URL")},get message(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_URL")},default:t.url||"",required:!0},{name:"options",type:"input",get prefix(){return e.i18n.translate("PICBED_UPYUN_OPTIONS")},get alias(){return e.i18n.translate("PICBED_UPYUN_OPTIONS")},get message(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_OPTIONS")},default:t.options||"",required:!1},{name:"path",type:"input",get prefix(){return e.i18n.translate("PICBED_UPYUN_PATH")},get alias(){return e.i18n.translate("PICBED_UPYUN_PATH")},get message(){return e.i18n.translate("PICBED_UPYUN_MESSAGE_PATH")},default:t.path||"",required:!1}]};const pt=()=>({register(e){!function(e){e.helper.uploader.register("aliyun",{get name(){return e.i18n.translate("PICBED_ALICLOUD")},handle:at,config:ot})}(e),function(e){e.helper.uploader.register("tcyun",{get name(){return e.i18n.translate("PICBED_TENCENTCLOUD")},handle:We,config:ze})}(e),function(e){e.helper.uploader.register("github",{get name(){return e.i18n.translate("PICBED_GITHUB")},handle:Je,config:Xe})}(e),function(e){e.helper.uploader.register("qiniu",{get name(){return e.i18n.translate("PICBED_QINIU")},handle:tt,config:nt})}(e),function(e){e.helper.uploader.register("upyun",{get name(){return e.i18n.translate("PICBED_UPYUN")},handle:ct,config:dt})}(e)}}),gt=(e,t,n)=>{const r=Ee(t);return r.real||(e.log.warn(`can't get ${n}'s image size`),e.log.warn("fallback to 200 * 200")),r};var Et={handle:async e=>{const t=e.output;return await Promise.all(e.input.map((async(n,r)=>{let i;if(i=pe(n)?await(async(e,t)=>{e=ge(e);let n,r=!1,i="";const s=new Promise(((s,a)=>{(async()=>{var a;try{const a=await t.request({method:"get",url:e,resolveWithFullResponse:!0,responseType:"arraybuffer"}).then((e=>{const t=e.headers["content-type"];return(null==t?void 0:t.includes("image"))&&(r=!0,i=`.${t.split("image/")[1]}`),e.data}));if(clearTimeout(n),r){const t=new o.URL(e).pathname;s({buffer:a,fileName:v.default.basename(t),extname:i,success:!0})}else s({success:!1,reason:`${e} is not image`})}catch(t){clearTimeout(n),s({success:!1,reason:`request ${e} error, ${null!==(a=null==t?void 0:t.message)&&void 0!==a?a:""}`})}})().catch(a)})),a=new Promise((t=>{n=setTimeout((()=>{t({success:!1,reason:`request ${e} timeout`})}),1e4)}));return Promise.race([s,a])})(n,e):await(async e=>{try{return{extname:v.default.extname(e),fileName:v.default.basename(e),buffer:await $.default.readFile(e),success:!0}}catch(t){return{reason:`read file ${e} error`,success:!1}}})(n),!i.success||!i.buffer)throw new Error(i.reason);{const s=gt(e,i.buffer,n);t[r]={buffer:i.buffer,fileName:i.fileName,width:s.width,height:s.height,extname:i.extname}}}))),e.output=t.filter((e=>e)),e}};var _t={handle:async e=>(e.output.push(...e.input),e)};class It{constructor(e){this.list=[],this.fullList=new Set,this.pluginMap=new Map,this.ctx=e,this.init()}init(){const e=v.default.join(this.ctx.baseDir,"package.json");if(!$.default.existsSync(e)){const t={name:"picgo-plugins",description:"picgo-plugins",repository:"https://github.com/PicGo/PicGo-Core",license:"MIT"};$.default.writeFileSync(e,JSON.stringify(t),"utf8")}}resolvePlugin(e,t){try{return ne.default.sync(t,{basedir:e.baseDir})}catch(n){return v.default.join(e.baseDir,"node_modules",t)}}load(){const e=v.default.join(this.ctx.baseDir,"package.json"),t=v.default.join(this.ctx.baseDir,"node_modules/");if(!$.default.existsSync(t))return!1;const n=$.default.readJSONSync(e),r=Object.keys(n.dependencies||{}),i=Object.keys(n.devDependencies||{}),s=r.concat(i).filter((e=>{if(!/^picgo-plugin-|^@[^/]+\/picgo-plugin-/.test(e))return!1;const t=this.resolvePlugin(this.ctx,e);return $.default.existsSync(t)}));for(const e of s)this.registerPlugin(e);return!0}registerPlugin(e,t){if(e&&"string"==typeof e){console.log("Start registering plugin "+e+" ..."),this.fullList.add(e);try{if(t){this.list.push(e),Me(e);const n=t(this.ctx);this.pluginMap.set(e,n),n.register(this.ctx)}else if(!0===this.ctx.getConfig(`picgoPlugins.${e}`)||void 0===this.ctx.getConfig(`picgoPlugins.${e}`)){this.list.push(e),Me(e),this.getPlugin(e).register(this.ctx);const t=`picgoPlugins[${e}]`;this.ctx.saveConfig({[t]:!0})}}catch(t){this.pluginMap.delete(e),this.list=this.list.filter((t=>t!==e)),this.fullList.delete(e),this.ctx.log.error(t),this.ctx.emit(qe.NOTIFICATION,{title:`Plugin ${e} Load Error`,body:t})}}else this.ctx.log.warn("Please provide valid plugin")}unregisterPlugin(e){this.list=this.list.filter((t=>t!==e)),this.fullList.delete(e),this.pluginMap.delete(e),Me(e),this.ctx.helper.uploader.unregister(e),this.ctx.helper.transformer.unregister(e),this.ctx.helper.beforeTransformPlugins.unregister(e),this.ctx.helper.beforeUploadPlugins.unregister(e),this.ctx.helper.afterUploadPlugins.unregister(e),this.ctx.cmd.unregister(e),this.ctx.removeConfig("picgoPlugins",e)}getPlugin(e){if(this.pluginMap.has(e))return this.pluginMap.get(e);const t=v.default.join(this.ctx.baseDir,"node_modules/");console.log("Start requiring plugin lib, pluginDir",t),console.log("Start requiring plugin lib, name",e);const n=require(t+e)(this.ctx);return this.pluginMap.set(e,n),n}getList(){return this.list}hasPlugin(e){return this.fullList.has(e)}getFullList(){return[...this.fullList]}}const ft="picgo-clipboard-images",ht={darwin:'-- From https://github.com/mushanshitiancai/vscode-paste-image\nproperty fileTypes : {{«class PNGf», ".png"}}\n\non run argv\n\tif argv is {} then\n\t\treturn ""\n\tend if\n\n\tif ((clipboard info) as string) contains "«class furl»" then\n\t\treturn POSIX path of (the clipboard as «class furl»)\n\telse\n\t\tset imagePath to (item 1 of argv)\n\t\tset theType to getType()\n\n\t\tif theType is not missing value then\n\t\t\ttry\n\t\t\t\tset myFile to (open for access imagePath with write permission)\n\t\t\t\tset eof myFile to 0\n\t\t\t\twrite (the clipboard as (first item of theType)) to myFile\n\t\t\t\tclose access myFile\n\t\t\t\treturn (POSIX path of imagePath)\n\t\t\ton error\n\t\t\t\ttry\n\t\t\t\t\tclose access myFile\n\t\t\t\tend try\n\t\t\t\treturn "no image"\n\t\t\tend try\n\t\telse\n\t\t\treturn "no image"\n\t\tend if\n\tend if\nend run\n\non getType()\n\trepeat with aType in fileTypes\n\t\trepeat with theInfo in (clipboard info)\n\t\t\tif (first item of theInfo) is equal to (first item of aType) then return aType\n\t\tend repeat\n\tend repeat\n\treturn missing value\nend getType\n',win32:'\nparam($imagePath)\n\n# Adapted from https://github.com/octan3/img-clipboard-dump/blob/master/dump-clipboard-png.ps1\n\nAdd-Type -Assembly PresentationCore\n$img = [Windows.Clipboard]::GetImage()\n\nif ($img -eq $null) {\n    "no image"\n    Exit 1\n}\n\nif (-not $imagePath) {\n    "no image"\n    Exit 1\n}\n\n$fcb = new-object Windows.Media.Imaging.FormatConvertedBitmap($img, [Windows.Media.PixelFormats]::Rgb24, $null, 0)\n$stream = [IO.File]::Open($imagePath, "OpenOrCreate")\n$encoder = New-Object Windows.Media.Imaging.PngBitmapEncoder\n$encoder.Frames.Add([Windows.Media.Imaging.BitmapFrame]::Create($fcb)) | out-null\n$encoder.Save($stream) | out-null\n$stream.Dispose() | out-null\n\n$imagePath\n',win10:'# Adapted from https://github.com/octan3/img-clipboard-dump/blob/master/dump-clipboard-png.ps1\nparam($imagePath)\n\n# https://github.com/PowerShell/PowerShell/issues/7233\n# fix the output encoding bug\n[console]::InputEncoding = [console]::OutputEncoding = New-Object System.Text.UTF8Encoding\n\nAdd-Type -Assembly PresentationCore\nfunction main {\n    $img = [Windows.Clipboard]::GetImage()\n\n    if ($img -eq $null) {\n        "no image"\n        Exit 1\n    }\n\n    if (-not $imagePath) {\n        "no image"\n        Exit 1\n    }\n\n    $fcb = new-object Windows.Media.Imaging.FormatConvertedBitmap($img, [Windows.Media.PixelFormats]::Rgb24, $null, 0)\n    $stream = [IO.File]::Open($imagePath, "OpenOrCreate")\n    $encoder = New-Object Windows.Media.Imaging.PngBitmapEncoder\n    $encoder.Frames.Add([Windows.Media.Imaging.BitmapFrame]::Create($fcb)) | out-null\n    $encoder.Save($stream) | out-null\n    $stream.Dispose() | out-null\n\n    $imagePath\n    # fix windows 10 native cmd crash bug when "picgo upload"\n    # https://github.com/PicGo/PicGo-Core/issues/32\n    Exit 1\n}\n\ntry {\n    # For WIN10\n    $file = Get-Clipboard -Format FileDropList\n    if ($file -ne $null) {\n        Convert-Path $file\n        Exit 1\n    }\n} catch {\n    # For WIN7 WIN8 WIN10\n    main\n}\n\nmain',linux:'#!/bin/sh\n\nif [ -z "$DISPLAY" ]; then\n    echo "no support" >&2\n    exit 1\nfi\n\ncase "$XDG_SESSION_TYPE" in\nwayland)\n    command -v wl-copy >/dev/null 2>&1 || {\n        echo >&2 "no wl-clipboard"\n        exit 1\n    }\n    filePath=$(wl-copy -o 2>/dev/null | grep ^file:// | cut -c8-)\n    if [ -z "$filePath" ]; then\n        if\n            wl-copy -t image/png image/png -o >"$1" 2>/dev/null\n        then\n            echo "$1"\n        else\n            rm -f "$1"\n            echo "no image"\n        fi\n    else\n        echo "$filePath"\n    fi\n    ;;\nx11 | tty)\n    # require xclip(see http://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script/677212#677212)\n    command -v xclip >/dev/null 2>&1 || {\n        echo >&2 "no xclip"\n        exit 1\n    }\n    # write image in clipboard to file (see http://unix.stackexchange.com/questions/145131/copy-image-from-clipboard-to-file)\n    filePath=$(xclip -selection clipboard -o 2>/dev/null | grep ^file:// | cut -c8-)\n    if [ -z "$filePath" ]; then\n        if\n            xclip -selection clipboard -target image/png -o >"$1" 2>/dev/null\n        then\n            echo "$1"\n        else\n            rm -f "$1"\n            echo "no image"\n        fi\n    else\n        echo "$filePath"\n    fi\n    ;;\nesac\n',wsl:'#!/bin/sh\n# grab the paths\nscriptPath=$(echo $0 | awk \'{ print substr( $0, 1, length($0)-6 ) }\')"windows10.ps1"\nimagePath=$(echo $1 | awk \'{ print substr( $0, 1, length($0)-18 ) }\')\nimageName=$(echo $1 | awk \'{ print substr( $0, length($0)-17, length($0) ) }\')\n\n# run the powershell script\nres=$(powershell.exe -noprofile -noninteractive -nologo -sta -executionpolicy unrestricted -file $(wslpath -w $scriptPath) $(wslpath -w $imagePath)"\\\\"$imageName)\n\n# note that there is a return symbol in powershell result\nnoImage=$(echo "no image\\r")\n\n# check whether image exists\nif [ "$res" = "$noImage" ] ;then\n    echo "no image"\nelse\n    echo $(wslpath -u -a "${res}")\nfi\n'},Pt={darwin:"mac.applescript",win32:"windows.ps1",win10:"windows10.ps1",linux:"linux.sh",wsl:"wsl.sh"};const Ct=async e=>{!function(e){const t=v.default.join(e.baseDir,ft);$.default.existsSync(t)||$.default.mkdirSync(t)}(e);const t=v.default.join(e.baseDir,ft,`${Q.default().format("YYYYMMDDHHmmss")}.png`);return await new Promise(((n,r)=>{const i=(()=>{const e=process.platform;if(re.default)return"wsl";if("win32"===e)return"10"===M.default.release().split(".")[0]?"win10":"win32";return"darwin"===e?"darwin":"linux"})(),s=v.default.join(e.baseDir,Pt[i]);let a;$.default.existsSync(s)||$.default.writeFileSync(s,ht[i],"utf8"),a="darwin"===i?D.spawn("osascript",[s,t]):"win32"===i||"win10"===i?D.spawn("powershell",["-noprofile","-noninteractive","-nologo","-sta","-executionpolicy","unrestricted","-file",s,t]):D.spawn("sh",[s,t]),a.stdout.on("data",(s=>{if("linux"===i&&"no xclip or wl-clipboard"===s.toString().trim())return e.emit(qe.NOTIFICATION,{title:"xclip or wl-clipboard not found",body:"Please install xclip(for x11) or wl-clipboard(for wayland) before run picgo"}),r(new Error("Please install xclip(for x11) or wl-clipboard(for wayland) before run picgo"));const a=s.toString().trim();let o=!1;if(v.default.basename(a)!==v.default.basename(t)&&$.default.existsSync(a)&&(o=!0),"no image"!==a&&!$.default.existsSync(a))return r(new Error(`Can't find ${a}`));n({imgPath:a,shouldKeepAfterUploading:o})}))}))},mt=new n.EventEmitter,Ut=new ae.default.Agent({maxVersion:"TLSv1.2",minVersion:"TLSv1.2"});function Nt(e,t,n){"object"==typeof n&&"value"in n&&"options"in n?e.append(t,n.value,n.options):e.append(t,n)}function Lt(e){return Object.assign(Object.assign({},e),{statusCode:e.status,body:e.data})}function St(e){var t,n,r,i,s,a,o;const l={method:(null===(n=null===(t=null==e?void 0:e.config)||void 0===t?void 0:t.method)||void 0===n?void 0:n.toUpperCase())||"",url:(null===(r=null==e?void 0:e.config)||void 0===r?void 0:r.url)||"",statusCode:(null===(i=null==e?void 0:e.response)||void 0===i?void 0:i.status)||0,message:(null==e?void 0:e.message)||"",stack:(null==e?void 0:e.stack)||{},response:{status:(null===(s=null==e?void 0:e.response)||void 0===s?void 0:s.status)||0,statusCode:(null===(a=null==e?void 0:e.response)||void 0===a?void 0:a.status)||0,body:(null===(o=null==e?void 0:e.response)||void 0===o?void 0:o.data)||""}};return Promise.reject(l)}class Dt{constructor(e){this.proxy="",this.options={},this.ctx=e,this.init(),mt.on(ke.CONFIG_CHANGE,(e=>{var t;switch(e.configName){case"picBed":(null===(t=e.value)||void 0===t?void 0:t.proxy)&&(this.proxy=e.value.proxy);break;case"picBed.proxy":this.proxy=e.value}}))}init(){const e=this.ctx.getConfig("picBed.proxy");e&&(this.proxy=e)}handleProxy(){if(this.proxy)try{const e=new o.URL(this.proxy);return{host:e.hostname,port:parseInt(e.port||"0",10),protocol:e.protocol}}catch(e){console.error(e)}return!1}request(e){var t;this.options.proxy=this.handleProxy(),this.options.headers=e.headers||{},this.options.maxBodyLength=1/0,this.options.maxContentLength=1/0,this.options.proxy&&(null===(t=e.url)||void 0===t?void 0:t.startsWith("https://"))?(this.options.httpsAgent=oe.default.httpsOverHttp({proxy:{host:this.options.proxy.host,port:this.options.proxy.port}}),this.options.proxy=!1):this.options.httpsAgent=Ut;const n=ie.default.create(this.options);n.interceptors.response.use(Lt,St);const r=function(e){var t;let n=!1;const r=Object.assign(Object.assign({},e),{url:e.url||"",headers:e.headers||{}});if(e.proxy){let i=e.proxy;if("string"==typeof i){try{i=new o.URL(e.proxy)}catch(e){i=!1,r.proxy=!1,console.error(e)}n=!0}i&&((null===(t=e.url)||void 0===t?void 0:t.startsWith("https://"))?(r.proxy=!1,r.httpsAgent=oe.default.httpsOverHttp({proxy:{host:null==i?void 0:i.hostname,port:parseInt(null==i?void 0:i.port,10)}})):r.proxy={host:i.hostname,port:parseInt(i.port,10),protocol:"http"})}if("formData"in e){const t=new se.default;for(const n in e.formData)Nt(t,n,e.formData[n]);r.data=t,r.headers=Object.assign(r.headers||{},t.getHeaders()),n=!0,delete r.formData}return"body"in e&&(r.data=e.body,n=!0,delete r.body),"qs"in e&&(r.params=e.qs,n=!0),r.__isOldOptions=n,r}(e);return n.interceptors.request.use((function(e){var t,n,r;let i="";return(null===(t=null==e?void 0:e.headers)||void 0===t?void 0:t.contentType)?(i=e.headers.contentType,delete e.headers.contentType):(null===(n=null==e?void 0:e.headers)||void 0===n?void 0:n.ContentType)?(i=e.headers.ContentType,delete e.headers.ContentType):(null===(r=null==e?void 0:e.headers)||void 0===r?void 0:r["content-type"])&&(i=e.headers["content-type"],delete e.headers["content-type"]),""!==i&&e.headers&&(e.headers["Content-Type"]=i),e})),"resolveWithFullResponse"in e&&e.resolveWithFullResponse?n.request(r):n.request(r).then((t=>r.__isOldOptions?"json"in e?e.json?t.data:void 0:JSON.stringify(t.data):t.data))}}class At{constructor(e){if(this.ctx=e,this.db=new b.JSONStore(this.ctx.configPath),!this.db.has("picBed"))try{this.db.set("picBed",{uploader:"github",current:"github"})}catch(e){throw this.ctx.log.error(e),e}if(!this.db.has("picgoPlugins"))try{this.db.set("picgoPlugins",{})}catch(e){throw this.ctx.log.error(e),e}}read(e){return this.db.read(e)}get(e=""){return this.read(!0),this.db.get(e)}set(e,t){return this.read(!0),this.db.set(e,t)}has(e){return this.read(!0),this.db.has(e)}unset(e,t){return this.read(!0),this.db.unset(e,t)}saveConfig(e){Object.keys(e).forEach((t=>{this.set(t,e[t])}))}removeConfig(e){Object.keys(e).forEach((t=>{this.unset(t,e[t])}))}}class Tt{constructor(e){this.ctx=e}async install(e,t,n){t||(t={});const r=[],i=e.map((e=>yt(this.ctx,e))).filter((e=>this.ctx.pluginLoader.hasPlugin(e.pkgName)?(r.push(e.pkgName),this.ctx.log.success(`PicGo has already installed ${e.pkgName}`),!1):!!e.success)),s=i.map((e=>e.fullName)),a=i.map((e=>e.pkgName));if(s.length>0){const e=await this.execCommand("install",s,this.ctx.baseDir,t,n);if(console.log("execCommand install result=>",e),e.code){const t=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_REASON",{code:`${e.code}`,data:e.data});this.ctx.log.error(t),this.ctx.emit("installFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED"),body:t});return{success:!1,body:t}}a.forEach((e=>{this.ctx.pluginLoader.registerPlugin(e)})),this.ctx.log.success(this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS")),this.ctx.emit("installSuccess",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS"),body:[...a,...r]});return{success:!0,body:[...a,...r]}}if(0===r.length){const e=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_VALID");this.ctx.log.error(e),this.ctx.emit("installFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED"),body:e});return{success:!1,body:e}}this.ctx.log.success(this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS")),this.ctx.emit("installSuccess",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS"),body:[...a,...r]});return{success:!0,body:[...a,...r]}}async uninstall(e,t,n){t||(t={});const r=e.map((e=>yt(this.ctx,e))).filter((e=>e.success)).map((e=>e.pkgName));if(r.length>0){const e=await this.execCommand("uninstall",r,this.ctx.baseDir,t,n);if(console.log("execCommand uninstall result=>",e),e.code){const t=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_REASON",{code:`${e.code}`,data:e.data});this.ctx.log.error(t),this.ctx.emit("uninstallFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED"),body:t});return{success:!1,body:t}}r.forEach((e=>{this.ctx.pluginLoader.unregisterPlugin(e)})),this.ctx.log.success(this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_SUCCESS")),this.ctx.emit("uninstallSuccess",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_SUCCESS"),body:r});return{success:!0,body:r}}{const e=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_VALID");this.ctx.log.error(e),this.ctx.emit("uninstallFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED"),body:e});return{success:!1,body:e}}}async update(e,t,n){t||(t={});const r=e.map((e=>yt(this.ctx,e))).filter((e=>e.success)).map((e=>e.pkgName));if(r.length>0){const e=await this.execCommand("update",r,this.ctx.baseDir,t,n);if(console.log("execCommand update result=>",e),e.code){const t=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_REASON",{code:`${e.code}`,data:e.data});this.ctx.log.error(t),this.ctx.emit("updateFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED"),body:t});return{success:!1,body:t}}this.ctx.log.success(this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_SUCCESS")),this.ctx.emit("updateSuccess",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_SUCCESS"),body:r});return{success:!0,body:r}}{const e=this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_VALID");this.ctx.log.error(e),this.ctx.emit("updateFailed",{title:this.ctx.i18n.translate("PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED"),body:e});return{success:!1,body:e}}}async execCommand(e,t,n,r={},i={}){const s=r.registry||this.ctx.getConfig("settings.registry"),a=r.proxy||this.ctx.getConfig("settings.proxy");return await new Promise((r=>{var o,l;let u=[e].concat(t).concat("--color=always").concat("--save");s&&(u=u.concat(`--registry=${s}`)),a&&(u=u.concat(`--proxy=${a}`));try{const e={cwd:n,env:Object.assign({},process.env,i)};console.log("Start run npm, args=>",u),console.log("Start run npm, npmOptions=>",e);const t=le.default("npm",u,e);let s="";null===(o=t.stdout)||void 0===o||o.on("data",(e=>{s+=e})).pipe(process.stdout),null===(l=t.stderr)||void 0===l||l.on("data",(e=>{s+=e})).pipe(process.stderr),t.on("close",(e=>{r(e?{code:e,data:s}:{code:0,data:s})})),t.on("error",(e=>{this.ctx.log.error(e),this.ctx.log.error("NPM is not installed"),this.ctx.emit(qe.FAILED,"NPM is not installed")}))}catch(e){this.ctx.log.error(e),this.ctx.emit(qe.FAILED,e)}}))}}const yt=(e,t)=>{const n={success:!1,fullName:"",pkgName:""},r=((e,t=console)=>{switch(_e(e)){case"normal":case"scope":return e;case"simple":return fe(e);default:{let n=e;return v.default.isAbsolute(e)&&$.default.existsSync(e)?he(n):(n=v.default.join(process.cwd(),e),$.default.existsSync(n)?he(n):(t.warn(`Can't find plugin ${e}`),""))}}})(t,e.log);if(!r)return n;const i=((e,t=console)=>{var n;switch(_e(e)){case"normal":return Pe(e);case"scope":return Pe(e,!0);case"simple":return Pe(fe(e));default:{if(!$.default.existsSync(e))return t.warn(`Can't find plugin: ${e}`),"";const r=v.default.posix.join(e,"package.json");if($.default.existsSync(r)){const e=$.default.readJSONSync(r)||{};return(null===(n=e.name)||void 0===n?void 0:n.includes("picgo-plugin-"))?e.name:(t.warn(`The plugin package.json's name filed is ${e.name||"empty"}, need to include the prefix: picgo-plugin-`),"")}return t.warn(`Can't find plugin: ${e}`),""}}})(r,e.log);return i?{success:!0,fullName:r,pkgName:i}:n},Ot={"zh-CN":{UPLOAD_FAILED:"上传失败",CHECK_SETTINGS:"请检查你的配置项是否正确",CHECK_SETTINGS_AND_NETWORK:"请检查你的配置项以及网络",UPLOAD_FAILED_REASON:"错误码：${code}，请打开浏览器粘贴地址查看相关原因",SERVER_ERROR:"服务端出错，请重试",AUTH_FAILED:"认证失败",PICBED_SMMS:"SM.MS",PICBED_SMMS_TOKEN:"设定Token",PICBED_SMMS_BACKUP_DOMAIN:"备用上传域名",PICBED_SMMS_MESSAGE_BACKUP_DOMAIN:"例如 smms.app",PICBED_ALICLOUD:"阿里云OSS",PICBED_ALICLOUD_ACCESSKEYID:"设定KeyId",PICBED_ALICLOUD_ACCESSKEYSECRET:"设定KeySecret",PICBED_ALICLOUD_BUCKET:"设定Bucket",PICBED_ALICLOUD_AREA:"设定存储区域",PICBED_ALICLOUD_PATH:"设定存储路径",PICBED_ALICLOUD_CUSTOMURL:"设定自定义域名",PICBED_ALICLOUD_OPTIONS:"设定网址后缀",PICBED_ALICLOUD_MESSAGE_AREA:"例如：oss-cn-beijing",PICBED_ALICLOUD_MESSAGE_PATH:"例如：test/",PICBED_ALICLOUD_MESSAGE_OPTIONS:"例如：?x-oss-process=xxx",PICBED_ALICLOUD_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_TENCENTCLOUD:"腾讯云COS",PICBED_TENCENTCLOUD_VERSION:"COS版本",PICBED_TENCENTCLOUD_SECRETID:"设定SecretId",PICBED_TENCENTCLOUD_SECRETKEY:"设定SecretKey",PICBED_TENCENTCLOUD_APPID:"设定AppId",PICBED_TENCENTCLOUD_BUCKET:"设定Bucket",PICBED_TENCENTCLOUD_AREA:"设定存储区域",PICBED_TENCENTCLOUD_PATH:"设定存储路径",PICBED_TENCENTCLOUD_OPTIONS:"设定网址后缀",PICBED_TENCENTCLOUD_CUSTOMURL:"设定自定义域名",PICBED_TENCENTCLOUD_MESSAGE_APPID:"例如：1234567890",PICBED_TENCENTCLOUD_MESSAGE_AREA:"例如：ap-beijing",PICBED_TENCENTCLOUD_MESSAGE_PATH:"例如：test/",PICBED_TENCENTCLOUD_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_TENCENTCLOUD_MESSAGE_OPTIONS:"例如：?imageMogr2",PICBED_GITHUB:"GitHub",PICBED_GITHUB_TOKEN:"设定Token",PICBED_GITHUB_REPO:"设定仓库名",PICBED_GITHUB_PATH:"设定存储路径",PICBED_GITHUB_BRANCH:"设定分支名",PICBED_GITHUB_CUSTOMURL:"设定自定义域名",PICBED_GITHUB_MESSAGE_REPO:"格式：username/repo",PICBED_GITHUB_MESSAGE_BRANCH:"例如：main",PICBED_GITHUB_MESSAGE_PATH:"例如：test/",PICBED_GITHUB_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_QINIU:"七牛云",PICBED_QINIU_ACCESSKEY:"设定AccessKey",PICBED_QINIU_SECRETKEY:"设定SecretKey",PICBED_QINIU_BUCKET:"设定Bucket",PICBED_QINIU_PATH:"设定存储路径",PICBED_QINIU_URL:"设定访问网址",PICBED_QINIU_OPTIONS:"设定网址后缀",PICBED_QINIU_AREA:"设定存储区域",PICBED_QINIU_MESSAGE_PATH:"例如：test/",PICBED_QINIU_MESSAGE_AREA:"例如：z0",PICBED_QINIU_MESSAGE_OPTIONS:"例如：?imageslim",PICBED_QINIU_MESSAGE_URL:"例如：https://xxx.yyy.glb.clouddn.com",PICBED_IMGUR:"Imgur",PICBED_IMGUR_CLIENTID:"设定ClientId",PICBED_IMGUR_PROXY:"设定代理",PICBED_IMGUR_MESSAGE_PROXY:"例如：http://127.0.0.1:1080",PICBED_UPYUN:"又拍云",PICBED_UPYUN_BUCKET:"设定Bucket",PICBED_UPYUN_OPERATOR:"设定操作员",PICBED_UPYUN_PASSWORD:"设定操作员密码",PICBED_UPYUN_PATH:"设定存储路径",PICBED_UPYUN_URL:"设定加速域名",PICBED_UPYUN_OPTIONS:"设定网址后缀",PICBED_UPYUN_MESSAGE_OPERATOR:"例如：me",PICBED_UPYUN_MESSAGE_PASSWORD:"输入操作员密码",PICBED_UPYUN_MESSAGE_URL:"例如：http://xxx.test.upcdn.net",PICBED_UPYUN_MESSAGE_OPTIONS:"例如：!imgslim",PICBED_UPYUN_MESSAGE_PATH:"例如：test/",PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS:"插件安装成功",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED:"插件安装失败",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_REASON:"插件安装失败，失败码为${code}，错误日志为 \n ${data}",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_PATH:"插件安装失败，请输入合法插件名或合法安装路径",PLUGIN_HANDLER_PLUGIN_UNINSTALL_SUCCESS:"插件卸载成功",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED:"插件卸载失败",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_REASON:"插件卸载失败，失败码为${code}，错误日志为 \n ${data}",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_VALID:"插件卸载失败，请输入合法插件名",PLUGIN_HANDLER_PLUGIN_UPDATE_SUCCESS:"插件更新成功",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED:"插件更新失败",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_REASON:"插件更新失败，失败码为${code}，错误日志为 \n ${data}",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_VALID:"插件更新失败，请输入合法插件名"},"zh-TW":{UPLOAD_FAILED:"上傳失敗",CHECK_SETTINGS:"請檢查你的設定是否正確",CHECK_SETTINGS_AND_NETWORK:"請檢查你的設定及網路",UPLOAD_FAILED_REASON:"錯誤碼：${code}，請打開瀏覽器貼上地址查看相關原因",SERVER_ERROR:"伺服器出錯，請重試",AUTH_FAILED:"認證失敗",PICBED_SMMS:"SM.MS",PICBED_SMMS_TOKEN:"設定Token",PICBED_SMMS_BACKUP_DOMAIN:"備用上傳網址",PICBED_SMMS_MESSAGE_BACKUP_DOMAIN:"例如 smms.app",PICBED_ALICLOUD:"阿里云OSS",PICBED_ALICLOUD_ACCESSKEYID:"設定KeyId",PICBED_ALICLOUD_ACCESSKEYSECRET:"設定KeySecret",PICBED_ALICLOUD_BUCKET:"設定Bucket",PICBED_ALICLOUD_AREA:"設定儲存區域",PICBED_ALICLOUD_PATH:"設定儲存路徑",PICBED_ALICLOUD_CUSTOMURL:"設定自訂網址",PICBED_ALICLOUD_OPTIONS:"設定網址後綴",PICBED_ALICLOUD_MESSAGE_AREA:"例如：oss-cn-beijing",PICBED_ALICLOUD_MESSAGE_PATH:"例如：test/",PICBED_ALICLOUD_MESSAGE_OPTIONS:"例如：?x-oss-process=xxx",PICBED_ALICLOUD_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_TENCENTCLOUD:"騰訊云COS",PICBED_TENCENTCLOUD_VERSION:"COS版本",PICBED_TENCENTCLOUD_SECRETID:"設定SecretId",PICBED_TENCENTCLOUD_SECRETKEY:"設定SecretKey",PICBED_TENCENTCLOUD_APPID:"設定AppId",PICBED_TENCENTCLOUD_BUCKET:"設定Bucket",PICBED_TENCENTCLOUD_AREA:"設定儲存區域",PICBED_TENCENTCLOUD_PATH:"設定儲存路徑",PICBED_TENCENTCLOUD_OPTIONS:"設定網址後綴",PICBED_TENCENTCLOUD_CUSTOMURL:"設定自訂網址",PICBED_TENCENTCLOUD_MESSAGE_APPID:"例如：1234567890",PICBED_TENCENTCLOUD_MESSAGE_AREA:"例如：ap-beijing",PICBED_TENCENTCLOUD_MESSAGE_PATH:"例如：test/",PICBED_TENCENTCLOUD_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_TENCENTCLOUD_MESSAGE_OPTIONS:"例如：?imageMogr2",PICBED_GITHUB:"GitHub",PICBED_GITHUB_TOKEN:"設定Token",PICBED_GITHUB_REPO:"設定倉庫名稱",PICBED_GITHUB_PATH:"設定儲存路徑",PICBED_GITHUB_BRANCH:"設定分支名稱",PICBED_GITHUB_CUSTOMURL:"設定自訂網址",PICBED_GITHUB_MESSAGE_REPO:"格式：username/repo",PICBED_GITHUB_MESSAGE_BRANCH:"例如：main",PICBED_GITHUB_MESSAGE_PATH:"例如：test/",PICBED_GITHUB_MESSAGE_CUSTOMURL:"例如：https://test.com",PICBED_QINIU:"七牛云",PICBED_QINIU_ACCESSKEY:"設定AccessKey",PICBED_QINIU_SECRETKEY:"設定SecretKey",PICBED_QINIU_BUCKET:"設定Bucket",PICBED_QINIU_PATH:"設定儲存路徑",PICBED_QINIU_URL:"設定訪問網址",PICBED_QINIU_OPTIONS:"設定網址後綴",PICBED_QINIU_AREA:"設定儲存區域",PICBED_QINIU_MESSAGE_PATH:"例如：test/",PICBED_QINIU_MESSAGE_AREA:"例如：z0",PICBED_QINIU_MESSAGE_OPTIONS:"例如：?imageslim",PICBED_QINIU_MESSAGE_URL:"例如：https://xxx.yyy.glb.clouddn.com",PICBED_IMGUR:"Imgur",PICBED_IMGUR_CLIENTID:"設定ClientId",PICBED_IMGUR_PROXY:"設定PROXY",PICBED_IMGUR_MESSAGE_PROXY:"例如：http://127.0.0.1:1080",PICBED_UPYUN:"又拍云",PICBED_UPYUN_BUCKET:"設定Bucket",PICBED_UPYUN_OPERATOR:"設定操作員",PICBED_UPYUN_PASSWORD:"設定操作員密碼",PICBED_UPYUN_PATH:"設定儲存路徑",PICBED_UPYUN_URL:"設定加速網址",PICBED_UPYUN_OPTIONS:"設定網址後綴",PICBED_UPYUN_MESSAGE_OPERATOR:"例如：me",PICBED_UPYUN_MESSAGE_PASSWORD:"輸入操作員密碼",PICBED_UPYUN_MESSAGE_URL:"例如：http://xxx.test.upcdn.net",PICBED_UPYUN_MESSAGE_OPTIONS:"例如：!imgslim",PICBED_UPYUN_MESSAGE_PATH:"例如：test/",PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS:"插件安裝成功",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED:"插件安裝失敗",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_REASON:"插件安裝失敗，失敗碼為${code}，錯誤紀錄為 \n ${data}",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_PATH:"插件安裝失敗，請輸入正確的插件名稱或正確的安裝路徑",PLUGIN_HANDLER_PLUGIN_UNINSTALL_SUCCESS:"插件卸載成功",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED:"插件卸載失敗",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_REASON:"插件卸載失敗，失敗碼為${code}，錯誤紀錄為 \n ${data}",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_VALID:"插件卸載失敗，請輸入正確的插件名稱",PLUGIN_HANDLER_PLUGIN_UPDATE_SUCCESS:"插件更新成功",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED:"插件更新失敗",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_REASON:"插件更新失敗，失敗碼為${code}，錯誤紀錄為 \n ${data}",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_VALID:"插件更新失敗，請輸入正確的插件名稱"},en:{UPLOAD_FAILED:"Upload failed",CHECK_SETTINGS:"Please check your settings",CHECK_SETTINGS_AND_NETWORK:"Please check your settings and network",UPLOAD_FAILED_REASON:"Error code: ${code}, please open the browser and paste the address to see the reason",SERVER_ERROR:"Server error, please try again later",AUTH_FAILED:"Authentication failed",PICBED_SMMS:"SM.MS",PICBED_SMMS_TOKEN:"Set Token",PICBED_SMMS_BACKUP_DOMAIN:"Set Backup Upload Domain",PICBED_SMMS_MESSAGE_BACKUP_DOMAIN:"Ex. smms.app",PICBED_ALICLOUD:"Ali Cloud",PICBED_ALICLOUD_ACCESSKEYID:"Set KeyId",PICBED_ALICLOUD_ACCESSKEYSECRET:"Set KeySecret",PICBED_ALICLOUD_BUCKET:"Set Bucket",PICBED_ALICLOUD_AREA:"Set Area",PICBED_ALICLOUD_PATH:"Set Path",PICBED_ALICLOUD_CUSTOMURL:"Set Custom URL",PICBED_ALICLOUD_OPTIONS:"Set URL Suffix",PICBED_ALICLOUD_MESSAGE_AREA:"Ex. oss-cn-beijing",PICBED_ALICLOUD_MESSAGE_PATH:"Ex. test/",PICBED_ALICLOUD_MESSAGE_OPTIONS:"Ex. ?x-oss-process=xxx",PICBED_ALICLOUD_MESSAGE_CUSTOMURL:"Ex. https://test.com",PICBED_TENCENTCLOUD:"Tencent Cloud",PICBED_TENCENTCLOUD_VERSION:"Choose COS version",PICBED_TENCENTCLOUD_SECRETID:"Set SecretId",PICBED_TENCENTCLOUD_SECRETKEY:"Set SecretKey",PICBED_TENCENTCLOUD_APPID:"Set AppId",PICBED_TENCENTCLOUD_BUCKET:"Set Bucket",PICBED_TENCENTCLOUD_AREA:"Set Area",PICBED_TENCENTCLOUD_PATH:"Set Path",PICBED_TENCENTCLOUD_OPTIONS:"Set URL Suffix",PICBED_TENCENTCLOUD_CUSTOMURL:"Set Custom URL",PICBED_TENCENTCLOUD_MESSAGE_APPID:"Ex. 1234567890",PICBED_TENCENTCLOUD_MESSAGE_AREA:"Ex. ap-beijing",PICBED_TENCENTCLOUD_MESSAGE_PATH:"Ex. test/",PICBED_TENCENTCLOUD_MESSAGE_CUSTOMURL:"Ex. http://test.com",PICBED_TENCENTCLOUD_MESSAGE_OPTIONS:"Ex. ?imageMogr2",PICBED_GITHUB:"GitHub",PICBED_GITHUB_TOKEN:"Set Token",PICBED_GITHUB_REPO:"Set Repo Name",PICBED_GITHUB_PATH:"Set Path",PICBED_GITHUB_BRANCH:"Set Branch",PICBED_GITHUB_CUSTOMURL:"Set Custom URL",PICBED_GITHUB_MESSAGE_REPO:"Ex. username/repo",PICBED_GITHUB_MESSAGE_BRANCH:"Ex. main",PICBED_GITHUB_MESSAGE_PATH:"Ex. test/",PICBED_GITHUB_MESSAGE_CUSTOMURL:"Ex. https://test.com",PICBED_QINIU:"Qiniu",PICBED_QINIU_ACCESSKEY:"Set AccessKey",PICBED_QINIU_SECRETKEY:"Set SecretKey",PICBED_QINIU_BUCKET:"Set Bucket",PICBED_QINIU_PATH:"Set Path",PICBED_QINIU_URL:"Set URL",PICBED_QINIU_OPTIONS:"Set URL Suffix",PICBED_QINIU_AREA:"Set Area",PICBED_QINIU_MESSAGE_PATH:"Ex. test/",PICBED_QINIU_MESSAGE_AREA:"Ex. z0",PICBED_QINIU_MESSAGE_OPTIONS:"Ex. ?imageslim",PICBED_QINIU_MESSAGE_URL:"Ex. https://xxx.yyy.glb.clouddn.com",PICBED_IMGUR:"Imgur",PICBED_IMGUR_CLIENTID:"Set ClientId",PICBED_IMGUR_PROXY:"Set Proxy",PICBED_IMGUR_MESSAGE_PROXY:"Ex. http://127.0.0.1:1080",PICBED_UPYUN:"Upyun",PICBED_UPYUN_BUCKET:"Set Bucket",PICBED_UPYUN_OPERATOR:"Set Operator",PICBED_UPYUN_PASSWORD:"Set Operator Password",PICBED_UPYUN_PATH:"Set Path",PICBED_UPYUN_URL:"Set URL",PICBED_UPYUN_OPTIONS:"Set URL Suffix",PICBED_UPYUN_MESSAGE_OPERATOR:"Ex. me",PICBED_UPYUN_MESSAGE_PASSWORD:"Please type the operator password",PICBED_UPYUN_MESSAGE_URL:"Ex. http://xxx.test.upcdn.net",PICBED_UPYUN_MESSAGE_OPTIONS:"Ex. !imgslim",PICBED_UPYUN_MESSAGE_PATH:"Ex. test/",PLUGIN_HANDLER_PLUGIN_INSTALL_SUCCESS:"Plugin installed successfully",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED:"Plugin installation failed",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_REASON:"Plugin installation failed, error code is ${code}, error log is \n ${data}",PLUGIN_HANDLER_PLUGIN_INSTALL_FAILED_PATH:"Plugin installation failed, please enter a valid plugin name or valid installation path",PLUGIN_HANDLER_PLUGIN_UNINSTALL_SUCCESS:"Plugin uninstalled successfully",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED:"Plugin uninstall failed",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_REASON:"Plugin uninstall failed, error code is ${code}, error log is \n ${data}",PLUGIN_HANDLER_PLUGIN_UNINSTALL_FAILED_VALID:"Plugin uninstall failed, please enter a valid plugin name",PLUGIN_HANDLER_PLUGIN_UPDATE_SUCCESS:"Plugin updated successfully",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED:"Plugin update failed",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_REASON:"Plugin update failed, error code is ${code}, error log is \n ${data}",PLUGIN_HANDLER_PLUGIN_UPDATE_FAILED_VALID:"Plugin update failed, please enter a valid plugin name"}};class Bt{constructor(e){this.ctx=e,this.objectAdapter=new R.ObjectAdapter(Ot);let t=this.ctx.getConfig("settings.language")||"zh-CN";Ot[t]||(t="zh-CN"),this.i18n=new R.I18n({adapter:this.objectAdapter,defaultLanguage:t}),this.loadOutterI18n()}loadOutterI18n(){const e=this.getOutterI18nFolder();$.default.readdirSync(e,{withFileTypes:!0}).forEach((t=>{if(t.isFile()&&t.name.endsWith(".yml")){const n=v.default.join(e,t.name),r=$.default.readFileSync(n,"utf8");try{const e=ue.default.load(r);Ot[t.name.replace(/\.yml$/,"")]=e}catch(e){console.error(e)}}}))}getOutterI18nFolder(){const e=v.default.join(this.ctx.baseDir,"i18n-cli");return $.default.pathExistsSync(e)||$.default.ensureDirSync(e),e}translate(e,t){return this.i18n.translate(e,t)||e}setLanguage(e){this.i18n.setLanguage(e),this.ctx.saveConfig({"settings.language":e})}addLocale(e,t){const n=this.objectAdapter.getLocale(e);if(!n)return!1;const r=S.merge(n,t);return this.objectAdapter.setLocale(e,r),!0}addLanguage(e,t){return!this.objectAdapter.getLocale(e)&&(this.objectAdapter.setLocale(e,t),Ot[e]=t,!0)}getLanguageList(){return Object.keys(Ot)}}class bt extends n.EventEmitter{get pluginLoader(){return this._pluginLoader}constructor(e=""){super(),this.VERSION="1.7.0",this.configPath=e,this.output=[],this.input=[],this.helper={transformer:new ve("transformer"),uploader:new ve("uploader"),beforeTransformPlugins:new ve("beforeTransformPlugins"),beforeUploadPlugins:new ve("beforeUploadPlugins"),afterUploadPlugins:new ve("afterUploadPlugins")},this.initConfigPath(),this.log=new Ke(this),this.cmd=new He(this),this.pluginHandler=new Tt(this),this.initConfig(),this.init()}initConfigPath(){if(""===this.configPath&&(this.configPath=r.homedir()+"/.picgo/config.json"),".JSON"!==v.default.extname(this.configPath).toUpperCase())throw this.configPath="",Error("The configuration file only supports JSON format.");this.baseDir=v.default.dirname(this.configPath);$.default.pathExistsSync(this.configPath)||$.default.ensureFileSync(`${this.configPath}`)}initConfig(){this.db=new At(this),this._config=this.db.read(!0)}init(){try{this.i18n=new Bt(this),this.Request=new Dt(this),this._pluginLoader=new It(this),Me("picgo"),pt().register(this),{register(e){e.helper.transformer.register("path",Et),e.helper.transformer.register("base64",_t)}}.register(this),Me(""),this._pluginLoader.load(),this.lifecycle=new Ye(this)}catch(e){throw this.emit(qe.UPLOAD_PROGRESS,-1),this.log.error(e),e}}use(e,t){if(t)return this.pluginLoader.registerPlugin(t,e),this.pluginLoader.getPlugin(t);return e(this)}registerCommands(){""!==this.configPath&&(this.cmd.init(),this.cmd.loadCommands())}getConfig(e){return e?S.get(this._config,e):this._config}saveConfig(e){Ue(e)?(this.setConfig(e),this.db.saveConfig(e)):this.log.warn("the format of config is invalid, please provide object")}removeConfig(e,t){e&&t&&(me(e)?this.log.warn(`the config.${e} can't be removed`):(this.unsetConfig(e,t),this.db.unset(e,t)))}setConfig(e){Ue(e)?Object.keys(e).forEach((t=>{me(t)&&(this.log.warn(`the config.${t} can't be modified`),delete e[t]),S.set(this._config,t,e[t]),mt.emit(ke.CONFIG_CHANGE,{configName:t,value:e[t]})})):this.log.warn("the format of config is invalid, please provide object")}unsetConfig(e,t){e&&t&&(me(e)?this.log.warn(`the config.${e} can't be unset`):S.unset(this.getConfig(e),t))}get request(){return this.Request.request.bind(this.Request)}async upload(e){if(""===this.configPath)return this.log.error("The configuration file only supports JSON format."),[];if(void 0!==e&&0!==e.length){const{output:t}=await this.lifecycle.start(e);return t}try{const{imgPath:e,shouldKeepAfterUploading:t}=await Ct(this);if("no image"===e)throw new Error("image not found in clipboard");{this.once(qe.FAILED,(()=>{t||$.default.remove(e).catch((e=>{this.log.error(e)}))})),this.once("finished",(()=>{t||$.default.remove(e).catch((e=>{this.log.error(e)}))}));const{output:n}=await this.lifecycle.start([e]);return n}}catch(e){throw this.emit(qe.FAILED,e),e}}}exports.Commander=He,exports.Lifecycle=Ye,exports.LifecyclePlugins=ve,exports.Logger=Ke,exports.PicGo=bt,exports.PluginHandler=Tt,exports.PluginLoader=It,exports.Request=Dt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
